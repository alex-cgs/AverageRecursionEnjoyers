#import "./transport_contract_v1.jsligo" "Tr"


export type buyer = { 
    address : address,
    location : string,
    object : string, 
    price : nat
};

export type deadline = timestamp;

export type sales = {
    address : address, 
    location : string, 
    object : string, 
    cost : nat, 
}

export type contract = {
    buyer : buyer,
    seller : option<sales>,
    contract_deadline : option<deadline>,
    transport_deadline : option<deadline>,
    transport_contract : option<Tr.order>,
    buyerApproved : bool,
    salesApproved : bool,
}

/* Functions: 
    1. OpenContract(buyer: address, location, object, price)
    2. Participate(seller: address, location, object, cost) :
        2.a first check if both objects are the same
        2.b Create a transport order
        2.c After closing transport order, get the feedback 
    3. CloseContrace(buyer: address) : If the buyer wants to close the contract befor the deadline
    
*/

export type cId = int;
export type maxId = int;
export type contractCollect = [map<cId, contract>,maxId];
export type primaryKey = {
    address : address, 
    id : int}

export type storage = map<address, contractCollect>;
export type result = [list<operation>, storage];

@entry
const openContract = (newBuyer : buyer, s : storage) : result => {
    let buyerAddress : address = Tezos.get_sender();
    // not relevant during testing
    //if (buyerAddress != newBuyer.address) failwith("User address do no match");
    let newContract : contract = {
        buyer : newBuyer,
        seller : None(),
        contract_deadline : None(),
        transport_deadline : None(),
        transport_contract : None(),
        buyerApproved : false,
        salesApproved : false,
    };

    let collection : contractCollect = match(Map.find_opt(buyerAddress,s)) {
        when(Some(collection)): collection;
        when(None()): [Map.empty,0];
    };
    let newCollection : contractCollect = [Map.add(collection[1], newContract,collection[0]), collection[1]+1];
    let newStorage : storage = Map.update(newBuyer.address,Some(newCollection),s);
    
    return [list([]), newStorage];
}

const linearSearch = (lst: list<contract>, val: contract) : option<contract> => {
    if (List.head_opt(lst) == Some(val)) return Some(val);
    let tail = match(List.tail_opt(lst)) {
        when(Some(tlst)) : linearSearch(tlst, val);
        when(None) : None();
    }
    return tail;
}

const searchContract = (c: primaryKey, s: storage) : contract => {
    const userMap = match(Map.find_opt(c.address,s)) {
        when(Some(cool)) : cool;
        when(None()) : failwith("user does not have a contract");
    };
    const contr : contract = match(Map.find_opt(c.id,userMap[0])) {
        when(Some(cool)) : cool;
        when(None()) : failwith("user does not have the requested contract");
    };
    return contr;
}

const updateStorage = (newC : contract, pK :primaryKey, s: storage) : storage => {
    const collection : contractCollect = match(Map.find_opt(pK.address,s)){
        when(Some(cool)) : cool;
        when(None()) : failwith("user does not have a contract");
    };
    const newCollection : contractCollect = [Map.update(pK.id, Some(newC), collection[0]),collection[1]];
    const newStorage : storage = Map.update(pK.address,Some(newCollection),s);
    return newStorage;
}

@entry
const participate = ([validation_info, seller] : [primaryKey, sales], s : storage) : result => {
    // we froze a certain amount fo money on the account of the money to guarantee
    const contr : contract = searchContract(validation_info, s);
    let sellerAddr : address = Tezos.get_sender();
    if (sellerAddr != seller.address) failwith("Indicared seller is not seller");
    if (validation_info.address == seller.address) failwith("Cannot participate on own contract.");
    if (contr.buyer.object != seller.object) failwith("Seller does not provide requested good.");
    
    const newContract : contract = {
        buyer : contr.buyer,
        seller : Some(seller),
        contract_deadline : contr.contract_deadline,
        transport_deadline : contr.transport_deadline,
        transport_contract : contr.transport_contract,
        buyerApproved : false,
        salesApproved : false,
    }
    const newStorage = updateStorage(newContract, validation_info, s);
    return [list([]), newStorage];
}

@entry
const validateContract = (pK: primaryKey, s: storage) : result => {
    const usr_addr : address = Tezos.get_sender();
    const contr : contract = searchContract(pK, s);
    let newContract : contract = contr;
    if (usr_addr == pK.address) 
    {
        newContract = {
            buyer : contr.buyer,
            seller : contr.seller,
            contract_deadline : contr.contract_deadline,
            transport_deadline : contr.transport_deadline,
            transport_contract : contr.transport_contract,
            buyerApproved : true,
            salesApproved : false,
        };
    }
    else if (contr.buyerApproved == true)
    {
        const sell : sales = match(contr.seller) {
            when(Some(sel)) : sel;
            when(None()) : failwith("No seller determined"); 
        }
        if (sell.address == usr_addr)
        {
            newContract = {
                buyer : contr.buyer,
                seller : contr.seller,
                contract_deadline : contr.contract_deadline,
                transport_deadline : contr.transport_deadline,
                transport_contract : contr.transport_contract,
                buyerApproved : true,
                salesApproved : true,
            };
        }
       
    }
    else
    {
        failwith("No permission to access contract");
    }
    const newStorage = updateStorage(newContract, pK, s);
    return [list([]), newStorage];
}

@entry
const closeContract = (pK: primaryKey, s: storage) : result => {
    const usr = Tezos.get_sender();
    const contr = searchContract(pK, s);
    if (usr != contr.buyer.address) failwith("Not owner of Contract");
    if (contr.buyerApproved && contr.salesApproved) {
        const newStorage : storage = Map.remove(contr.buyer.address,s);
        return [list([]), newStorage];
    }
    return [list([]), s]
}

@entry 
const fetchChain = (_lol : unit, s: storage) : result => {
    return [list([]), s];
}