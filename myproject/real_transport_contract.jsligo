
namespace Tr {
    export type order = {
        buyer_address: address,
        origin : string,
        destination : string, 
        contract_deadline : timestamp, 
        transport_deadline : timestamp,
        winner_address : address,
        winner_price : int,
        order_id : int 
    };
    export type order_id = int;
    export type last_id = int; // Id of the lastest hash 

    export type storage = [map<order_id, order>, last_id];

    export type result = [list<operation>, [map<order_id, order>, last_id]];

    function force_access (key : int, map : map<order_id, order>) {
        return match(Map.find_opt (key, map)){
            when(Some(value)): value;
            when(None) : failwith("No order")
        }
    };

    // Let's go from bugs to features ðŸ™‚
    // Here the buyer can enter its own TC, if thye want. (Or this is a "bad access"?)

    @entry 
    function createContract(information : order, oldStorage : storage) : result {
        let newID : int = oldStorage[1] + 1;
        let new_order = {
            buyer_address : Tezos.get_sender(),
            origin : information.origin,
            destination : information.destination, 
            contract_deadline : information.contract_deadline, 
            transport_deadline : information.transport_deadline,
            winner_address : Tezos.get_sender(),
            winner_price : -1,
            order_id : newID 
        };
        let newMap : map<order_id, order> = Map.add(newID, new_order, oldStorage[0]);
        return [list([]), [newMap, newID]];
    }

    @entry 
    function closeContract(idOfContract : int, oldStorage : storage) : result {
        if (!Map.mem(idOfContract, oldStorage[0])) {
            failwith("Access deny");
        }
        let newMap = Map.remove(idOfContract, oldStorage[0]);
        return [list([]), [newMap, oldStorage[1]]];
    }

    @entry 
    function getTheOrderData(_ : int, oldStorage : storage) : result {
        return [list([]), oldStorage];
    }

    @entry 
    function participate(order : order, oldStorage : storage) : result {
        
        if (!Map.mem(order.order_id, oldStorage[0])) {
            failwith("No such order"); // or return false;
        }
        
        let win_pr : int = force_access(order.order_id, oldStorage[0]).winner_price;
        if (win_pr == -1 || order.winner_price < win_pr) {
            let newMap = match(Map.find_opt(order.order_id, oldStorage[0])) {
                when(Some(i)): Map.update(order.order_id, Some({
                    buyer_address : i.buyer_address, 
                    origin : i.origin,
                    destination : i.destination, 
                    contract_deadline : i.contract_deadline, 
                    transport_deadline : i.transport_deadline,
                    winner_address : order.winner_address,
                    winner_price : order.winner_price,
                    order_id : order.order_id
                    }), oldStorage[0]);
                when(None): failwith("System of a down")
            };
            return [list([]), [newMap, oldStorage[1]]];
        } else {
            return [list([]), oldStorage];
        }
        // Here I should say, that the contract has not been updated.CloseContract
    }

}

const test_code = (): unit => {
    
    type order = Tr.order;
    type order_id = Tr.order_id;
    type last_id = Tr.last_id;
    type storage = Tr.storage;
    type result = Tr.result;  
    type deadline = timestamp;

    let buyer0Addr = Tezos.get_sender();
    let transport0Addr = Test.nth_bootstrap_account(1);

    let ctDeadline : deadline = Tezos.get_now();
    let trDeadline : deadline = Tezos.get_now();

    /** ASSUMING we have parsed the data from the Project Contract thingy, then */
    let orderFromBuyer : order = {
        buyer_address: buyer0Addr,
        origin : "La Provencale",
        destination : "Delhaize", 
        contract_deadline : ctDeadline, 
        transport_deadline : trDeadline,
        winner_address : buyer0Addr,
        winner_price : -1,
        order_id : 1
    };

    let answerFromSeller = { 
        buyer_address: buyer0Addr,
        origin : "La Provencale",
        destination : "Delhaize", 
        contract_deadline : ctDeadline, 
        transport_deadline : trDeadline,
        winner_address : transport0Addr,
        winner_price : 100,
        order_id : 1
    }

    /** Create Contract */
    /** Assert */
    /** Participate */
    /** Assert */
    /** GetTheOrderData */
    /** Assert */
    /** Close Contract */
    /** Assert */

    let test_map : map<int, order> = Map.empty;
    Map.add(1, orderFromBuyer, test_map);

    let contr = Test.originate(contract_of(Tr), [test_map, 0], 0tez);
    let p1 : parameter_of Tr = CreateContract(orderFromBuyer);
    let p2 : parameter_of Tr = Participate(answerFromSeller); 

    Test.transfer_exn(contr.addr, p1, 1mutez);
    Test.transfer_exn(contr.addr, p2, 1mutez);

    const final = Map.literal (list([
        [1,answerFromSeller],
    ]));
    let _unit_ = Test.log(Test.get_storage(contr.addr));
    Test.log("Be yourself");
    Test.log([final, 1]);
    return (assert (Test.equal(Test.get_storage(contr.addr), [final,1])));

}

const test = test_code();