parameter (or (pair %openContract (string %buyer_address) (pair (string %contract_deadline) (pair (string %destination) (string %transport_deadline)))) (pair %participate (string %origin) (pair (mutez %price) (string %winner_address))));
storage   (pair (string %buyer_address) (pair (string %contract_deadline) (pair (string %destination) (pair (string %origin) (pair (mutez %price) (pair (string %transport_deadline) (string %winner_address)))))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        SWAP;       # @storage : @parameter%openContract
        # == openContract ==
        # self.data.buyer_address = params.buyer_address # @storage : @parameter%openContract
        DUP 2;      # @parameter%openContract : @storage : @parameter%openContract
        CAR;        # string : @storage : @parameter%openContract
        UPDATE 1;   # @storage : @parameter%openContract
        # self.data.destination = params.destination # @storage : @parameter%openContract
        DUP 2;      # @parameter%openContract : @storage : @parameter%openContract
        GET 5;      # string : @storage : @parameter%openContract
        UPDATE 5;   # @storage : @parameter%openContract
        # self.data.contract_deadline = params.contract_deadline # @storage : @parameter%openContract
        DUP 2;      # @parameter%openContract : @storage : @parameter%openContract
        GET 3;      # string : @storage : @parameter%openContract
        UPDATE 3;   # @storage : @parameter%openContract
        SWAP;       # @parameter%openContract : @storage
        # self.data.transport_deadline = params.transport_deadline # @parameter%openContract : @storage
        GET 6;      # string : @storage
        UPDATE 11;  # @storage
        # self.data.price = sp.tez(0) # @storage
        PUSH mutez 0; # mutez : @storage
        UPDATE 9;   # @storage
      }
      {
        # == participate ==
        # if self.data.price == sp.tez(0) or params.price < self.data.price : # @parameter%participate : @storage
        PUSH mutez 0; # mutez : @parameter%participate : @storage
        DUP 3;      # @storage : mutez : @parameter%participate : @storage
        GET 9;      # mutez : mutez : @parameter%participate : @storage
        COMPARE;    # int : @parameter%participate : @storage
        EQ;         # bool : @parameter%participate : @storage
        IF
          {
            PUSH bool True; # bool : @parameter%participate : @storage
          }
          {
            DUP 2;      # @storage : @parameter%participate : @storage
            GET 9;      # mutez : @parameter%participate : @storage
            DUP 2;      # @parameter%participate : mutez : @parameter%participate : @storage
            GET 3;      # mutez : mutez : @parameter%participate : @storage
            COMPARE;    # int : @parameter%participate : @storage
            LT;         # bool : @parameter%participate : @storage
          }; # bool : @parameter%participate : @storage
        IF
          {
            SWAP;       # @storage : @parameter%participate
            # self.data.price = params.price # @storage : @parameter%participate
            DUP 2;      # @parameter%participate : @storage : @parameter%participate
            GET 3;      # mutez : @storage : @parameter%participate
            UPDATE 9;   # @storage : @parameter%participate
            # self.data.winner_address = params.winner_address # @storage : @parameter%participate
            DUP 2;      # @parameter%participate : @storage : @parameter%participate
            GET 4;      # string : @storage : @parameter%participate
            UPDATE 12;  # @storage : @parameter%participate
            SWAP;       # @parameter%participate : @storage
            # self.data.origin = params.origin # @parameter%participate : @storage
            CAR;        # string : @storage
            UPDATE 7;   # @storage
          }
          {
            DROP;       # @storage
          }; # @storage
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };
