#import "./transport_contract_v1.jsligo" "Tr"

const test_code = (): unit => {


    type order = Tr.order;
    type order_id = Tr.order_id;
    type last_id = Tr.last_id;
    type storage = Tr.storage;
    type result = Tr.result;  
    type deadline = timestamp;

    let buyer0Addr = Tezos.get_sender();
    let transport0Addr = Test.nth_bootstrap_account(1);

    let ctDeadline : deadline = Tezos.get_now();
    let trDeadline : deadline = Tezos.get_now();

    /** ASSUMING we have parsed the data from the Project Contract thingy, then */
    let order0 : order = {
        buyer_address: buyer0Addr,
        origin : "Delhaize",
        destination : "La Provencale", 
        contract_deadline : ctDeadline, 
        transport_deadline : trDeadline,
        winner_address : buyer0Addr,
        winner_price : -1,
        order_id : 1
    };

    let order_seller = { 
        buyer_address: buyer0Addr,
        origin : "Delhaize",
        destination : "La Provencale", 
        contract_deadline : ctDeadline, 
        transport_deadline : trDeadline,
        winner_address : transport0Addr,
        winner_price : 100,
        order_id : 1
    }

    /** Create Contract */
    /** Assert */
    /** Participate */
    /** Assert */
    /** GetTheOrderData */
    /** Assert */
    /** Close Contract */
    /** Assert */

    let test_map : map<int, order> = Map.empty;
    Map.add(1, order0, test_map);

    let contr = Test.originate(contract_of(Tr), [test_map, 0], 0tez);
    let p1 : parameter_of Tr = CreateContract(order0);
    let p2 : parameter_of Tr = Participate(order_seller); 

    Test.transfer_exn(contr.addr, p1, 1mutez);
    Test.transfer_exn(contr.addr, p2, 1mutez);

    const final = Map.literal (list([
        [1,order_seller],
    ]));
    let _unit_ = Test.log(Test.get_storage(contr.addr));
    Test.log("Be yourself");
    Test.log([final, 1]);
    return (assert (Test.equal(Test.get_storage(contr.addr), [final,1])));

}

const test = test_code();